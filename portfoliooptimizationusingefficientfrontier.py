# -*- coding: utf-8 -*-
"""PortfolioOptimizationUsingEfficientFrontier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fQv2s3HdSh9GkMroxXxT4tSRpg6mldyL
"""

#PORTFOLIO OPTIMIZATION
#This program attempts to optimize a users portfolio using the Efficient Frontier

#Importing the python libraries
from pandas_datareader import data as wb
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Get the stocks sumbols/tickers in the portfolio
# FAANG
Assets= ['AAPL', 'NFLX','GOOG']

# Assign Weights to the stocks
weights=np.array([0.2,0.2,0.2,0.2,0.2])

#Get the stock/Portfolio starting date
stockStartDate='2013-01-01'

today=datetime.today().strftime('%Y-%m-%d')
today

!pip install yfinance

import yfinance as yf
data = yf.download("FB AMZN AAPL NFLX GOOGL", start="2013-01-01", end="2020-03-16")

data

df=pd.DataFrame()
df=data['Adj Close']

df

#Show the df
df

# store the adjusted close price pf the stock into the df
#for stock in Assets : 
  #df[stock] = wb.DataReader(stock, data_source = 'yahoo', start = stockStartDate, end = today)['Adj Close']

#df[stock]=web.DataReader(stock,data_source='yahoo',start=stockStartDate,end=today)['Adj Close']

#Create a dataframe to store the adjusted close price of the stocks
#df=pd.DataFrame()

# Store the adjusted close price of the stock in the dateframe
#for stock in Assets:

 #  df[stock]=web.DataReader(stock,data_source='yahoo',start=stockStartDate,end=today)['Adj Close']

#Visually show the stock/portfolio
title= 'PortfolioAdj.Clone Price History'

#Get the stocks
my_stocks=df

my_stocks.head()

for c in my_stocks.columns.values:
  plt.plot(my_stocks[c], label = c)

plt.title(title)
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Adj. Price USD($)')
plt.legend(my_stocks.columns.values, loc = 'upper left')
plt.show()

returns

df

#Show the daily simple return
returns=df.pct_change()

returns

#Create and show the annualized covariance matrix
Cov_matrix_annual=returns.cov()*252

Cov_matrix_annual

#weights=pd.DataFrame()

weights

#Calculate the portfolio variance
port_variance=np.dot(weights.T,np.dot(Cov_matrix_annual, weights))
port_variance

#Calculate the portfolio volatility aka std deviation
port_volatility= np.sqrt(port_variance)
port_volatility

#calculate the annual portfolio return
portfoliosimpleannualreturn=np.sum(returns.mean()*weights*252)
portfoliosimpleannualreturn

#show the expected annual return, volatility(risk), and variance
percent_var=str(round(port_variance,2)*100)
percent_vols=str(round(port_volatility,2)*100)
percent_ret=str(round(portfoliosimpleannualreturn,2)*100)

print('ExpectedAnnualReturns:'+percent_ret)
print('AnnualValatility/risk:'+percent_vols)
print('Anual Variance:'+percent_var)

!pip install PyPortfolioOpt
!pip install -e git+https://github.com/robertmartin8/PyPortfolioOpt.git

from pypfopt.efficient_frontier import EfficientFrontier

from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

#Portfolio Optimization!

#Calculate the expected returns and the annualized sample covariance matrix of asset returns

mu = expected_returns.mean_historical_return(df)
S = risk_models.sample_cov(df)

#Optimize for max sharp ratio
ef=EfficientFrontier(mu,S)
weights=ef.max_sharpe()
Cleaned_weights=ef.clean_weights()
print(Cleaned_weights)
ef.portfolio_performance(verbose=True)

from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

latest_prices = get_latest_prices(df)
da = DiscreteAllocation(weights, latest_prices, total_portfolio_value=15000)
allocation, leftover = da.lp_portfolio()
print(allocation)

print('Discrete allocation:', allocation)
print('Fundsremaining:${:.2f}'.format(leftover))